#!/usr/bin/env python
#    Copyright 2009 Google Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#    implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
#    BHJTW edited for JSONBOT on 8-12-2011

"""Simple web application load testing script.

This is a simple web application load
testing skeleton script. Modify the code between !!!!!
to make the requests you want load tested.
"""

## config section

NUM_THREADS = 10  # How many threads should be running at peak load.
TIME_AT_PEAK_QPS = 10 # How many minutes the test should run with all threads active.
DELAY_BETWEEN_THREAD_START = 30 # How many seconds to wait between starting threads. - shouldn't be set below 30 seconds.

## jsb imports

from jsb.utils.popen import gozerpopen
from jsb.lib.datadir import getdatadir
from jsb.version import getversion

## basic imports

from subprocess import Popen, PIPE
import os
import sys

print getversion("LOADTEST")

## options

from optparse import OptionParser
parser = OptionParser(usage='usage: %prog [options] <url>', version='%prog' + getversion())
parser.add_option('-d', '--datadir', type='string', default=False,dest='datadir', help="datadir to use")
opts, args = parser.parse_args()
opts.args = args

ddir = opts.datadir or getdatadir()
homedir = os.path.expanduser("~")

try: target = opts.args[0]
except IndexError: 
    target = "https://jsonbot-plus.appspot.com/dispatch"
    #print "jsb-loadtest <url>"
    #os._exit(1)

from jsb.utils.lazydict import LazyDict
from jsb.lib.examples import examples
from jsb.lib.boot import boot
from jsb.utils.url import posturl
from jsb.utils.exception import handle_exception
from jsb.lib.threads import start_new_thread

boot(force=True)

## original imports

import httplib2
import random
import socket
import time
from threading import Event
from threading import Thread
from threading import current_thread
from urllib import urlencode

## defines

quitevent = Event()

## threadproc function

def threadproc():
    """This function is executed by each thread."""
    print "Thread started: %s" % current_thread().getName()
    while not quitevent.is_set():
        for example in examples.getexamples():
            if not example: continue
            try:
                data = LazyDict({"cmnd": "!" + example, "how": "overwrite", "target": "output_div"})
                out = data.tojson()
                resp = posturl(target, {}, out)
                if resp.status != 200: print "Response not OK (%s)" % resp.status
                else: print resp.msg
            except socket.timeout: pass
            except Exception, ex: handle_exception() ; os._exit(1)
    print "Thread finished: %s" % current_thread().getName()


## main loop

try:
    runtime = (TIME_AT_PEAK_QPS * 60 + DELAY_BETWEEN_THREAD_START * NUM_THREADS)
    print "Total runtime will be: %d seconds" % runtime
    threads = []
    try:
        for i in range(NUM_THREADS):
            threads.append(start_new_thread(threadproc, ()))
            time.sleep(DELAY_BETWEEN_THREAD_START)
        print "All threads running"
        time.sleep(TIME_AT_PEAK_QPS*60)
        print "Completed full time at peak qps, shutting down threads"
    except: print "Exception raised, shutting down threads"

    quitevent.set()
    time.sleep(3)
    for t in threads: t.join(1.0)
    print "Finished"
except Exception, ex: handle_exception()

os._exit(1)
